/*
 * Copyright 2015-2021 Howard Chu, Symas Corp.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted only as authorized by the OpenLDAP
 * Public License.
 *
 * A copy of this license is available in the file LICENSE in the
 * top-level directory of the distribution or, alternatively, at
 * <http://www.OpenLDAP.org/license.html>.
 */
/** @page starting Getting Started

LMDB is compact, fast, powerful, and robust and implements a simplified
variant of the BerkeleyDB (BDB) API. (BDB is also very powerful, and verbosely
documented in its own right.) After reading this page, the main
\ref mdb documentation should make sense. Thanks to Bert Hubert
for creating the
<a href="https://github.com/ahupowerdns/ahutils/blob/master/lmdb-semantics.md">
initial version</a> of this writeup.

Everything starts with an environment, created by #mdb_env_create().
Once created, this environment must also be opened with #mdb_env_open().

#mdb_env_open() gets passed a name which is interpreted as a directory
path. Note that this directory must exist already, it is not created
for you. Within that directory, a lock file and a storage file will be
generated. If you don't want to use a directory, you can pass the
#MDB_NOSUBDIR option, in which case the path you provided is used
directly as the data file, and another file with a "-lock" suffix
added will be used for the lock file.

Once the environment is open, a transaction can be created within it
using #mdb_txn_begin(). Transactions may be read-write or read-only,
and read-write transactions may be nested. A transaction must only
be used by one thread at a time. Transactions are always required,
even for read-only access. The transaction provides a consistent
view of the data.

Once a transaction has been created, a database can be opened within it
using #mdb_dbi_open(). If only one database will ever be used in the
environment, a NULL can be passed as the database name. For named
databases, the #MDB_CREATE flag must be used to create the database
if it doesn't already exist. Also, #mdb_env_set_maxdbs() must be
called after #mdb_env_create() and before #mdb_env_open() to set the
maximum number of named databases you want to support.

Note: a single transaction can open multiple databases. Generally
databases should only be opened once, by the first transaction in
the process. After the first transaction completes, the database
handles can freely be used by all subsequent transactions.

Within a transaction, #mdb_get() and #mdb_put() can store single
key/value pairs if that is all you need to do (but see \ref Cursors
below if you want to do more).

A key/value pair is expressed as two #MDB_val structures. This struct
has two fields, \c mv_size and \c mv_data. The data is a \c void pointer to
an array of \c mv_size bytes.

Because LMDB is very efficient (and usually zero-copy), the data returned
in an #MDB_val structure may be memory-mapped straight from disk. In
other words <b>look but do not touch</b> (or free() for that matter).
Once a transaction is closed, the values can no longer be used, so
make a copy if you need to keep them after that.

@section Cursors Cursors

To do more powerful things, we must use a cursor.

Within the transaction, a cursor can be created with #mdb_cursor_open().
With this cursor we can store/retrieve/delete (multiple) values using
#mdb_cursor_get(), #mdb_cursor_put(), and #mdb_cursor_del().

#mdb_cursor_get() positions itself depending on the cursor operation
requested, and for some operations, on the supplied key. For example,
to list all key/value pairs in a database, use operation #MDB_FIRST for
the first call to #mdb_cursor_get(), and #MDB_NEXT on subsequent calls,
until the end is hit.

To retrieve all keys starting from a specified key value, use #MDB_SET.
For more cursor operations, see the \ref mdb docs.

When using #mdb_cursor_put(), either the function will position the
cursor for you based on the \b key, or you can use operation
#MDB_CURRENT to use the current position of the cursor. Note that
\b key must then match the current position's key.

@subsection summary Summarizing the Opening

So we have a cursor in a transaction which opened a database in an
environment which is opened from a filesystem after it was
separately created.

Or, we create an environment, open it from a filesystem, create a
transaction within it, open a database within that transaction,
and create a cursor within all of the above.

Got it?

@section thrproc Threads and Processes

LMDB uses POSIX locks on files, and these locks have issues if one
process opens a file multiple times. Because of this, do not
#mdb_env_open() a file multiple times from a single process. Instead,
share the LMDB environment that has opened the file across all threads.
Otherwise, if a single process opens the same environment multiple times,
closing it once will remove all the locks held on it, and the other
instances will be vulnerable to corruption from other processes.

Also note that a transaction is tied to one thread by default using
Thread Local Storage. If you want to pass read-only transactions across
threads, you can use the #MDB_NOTLS option on the environment.

@section txns Transactions, Rollbacks, etc.

To actually get anything done, a transaction must be committed using
#mdb_txn_commit(). Alternatively, all of a transaction's operations
can be discarded using #mdb_txn_abort(). In a read-only transaction,
any cursors will \b not automatically be freed. In a read-write
transaction, all cursors will be freed and must not be used again.

For read-only transactions, obviously there is nothing to commit to
storage. The transaction still must eventually be aborted to close
any database handle(s) opened in it, or committed to keep the
database handles around for reuse in new transactions.

In addition, as long as a transaction is open, a consistent view of
the database is kept alive, which requires storage. A read-only
transaction that no longer requires this consistent view should
be terminated (committed or aborted) when the view is no longer
needed (but see below for an optimization).

There can be multiple simultaneously active read-only transactions
but only one that can write. Once a single read-write transaction
is opened, all further attempts to begin one will block until the
first one is committed or aborted. This has no effect on read-only
transactions, however, and they may continue to be opened at any time.

@section dupkeys Duplicate Keys

#mdb_get() and #mdb_put() respectively have no and only some support
for multiple key/value pairs with identical keys. If there are multiple
values for a key, #mdb_get() will only return the first value.

When multiple values for one key are required, pass the #MDB_DUPSORT
flag to #mdb_dbi_open(). In an #MDB_DUPSORT database, by default
#mdb_put() will not replace the value for a key if the key existed
already. Instead it will add the new value to the key. In addition,
#mdb_del() will pay attention to the value field too, allowing for
specific values of a key to be deleted.

Finally, additional cursor operations become available for
traversing through and retrieving duplicate values.

@section optim Some Optimization

If you frequently begin and abort read-only transactions, as an
optimization, it is possible to only reset and renew a transaction.

#mdb_txn_reset() releases any old copies of data kept around for
a read-only transaction. To reuse this reset transaction, call
#mdb_txn_renew() on it. Any cursors in this transaction must also
be renewed using #mdb_cursor_renew().

Note that #mdb_txn_reset() is similar to #mdb_txn_abort() and will
close any databases you opened within the transaction.

To permanently free a transaction, reset or not, use #mdb_txn_abort().

@section cleanup Cleaning Up

For read-only transactions, any cursors created within it must
be closed using #mdb_cursor_close().

It is very rarely necessary to close a database handle, and in
general they should just be left open.

@section onward The Full API

The full \ref mdb documentation lists further details, like how to:

  \li size a database (the default limits are intentionally small)
  \li drop and clean a database
  \li detect and report errors
  \li optimize (bulk) loading speed
  \li (temporarily) reduce robustness to gain even more speed
  \li gather statistics about the database
  \li define custom sort orders

*/

////////////////////////////////////////////////////////////////////////////////

mdb_copy - LMDB environment copy tool

mdb_copy [-V -c -n -v ] dstpath

The mdb_copy utility copies an LMDB environment. The environment can be copied regardless of whether it is currently in
use. No lockfile is created, since it gets recreated at need.

If dstpath is specified it must be the path of an empty directory for storing the backup. Otherwise, the backup will be
written to stdout.

-V  Write the library version number to the standard output, and exit.
-c  Compact while copying. Only current data pages will be copied; freed or unused pages will be omitted from the copy.
    This option will slow down the backup process as it is more CPU-intensive. Currently it fails if the environment has
    suffered a page leak.
-n  Open LDMB environment(s) which do not use subdirectories.
-v  Use the previous environment state instead of the latest state. This may be useful if the latest state has been
    corrupted.

Exit status is zero if no errors occur.
Errors result in a non-zero exit status and a diagnostic message being written to standard error.

This utility can trigger significant file size growth if run in parallel with write transactions, because pages which
they free during copying cannot be reused until the copy is done.

////////////////////////////////////////////////////////////////////////////////

mdb_drop - LMDB database delete tool

mdb_drop [ -V -n -d ] [ -s subdb ] envpath

The mdb_drop utility empties or deletes a database in the specified environment.

-V        Write the library version number to the standard output, and exit.
-n        Operate on an LMDB database which does not use subdirectories.
-d        Delete the specified database, don't just empty it.
-s subdb  Operate on a specific subdatabase. If no database is specified, only the main database is dropped.

Exit status is zero if no errors occur.
Errors result in a non-zero exit status and a diagnostic message being written to standard error.

////////////////////////////////////////////////////////////////////////////////

mdb_dump - LMDB environment export tool

mdb_dump [ -V -a -l -n -p -v ] [ -f file ] [ -s subd ]

The mdb_dump utility reads a database and writes its contents to the standard output using a portable flat-text format
understood by the mdb_load utility.

-V        Write the library version number to the standard output, and exit.
-f file   Write to the specified file instead of to the standard output.
-l        List the databases stored in the environment. Just the names will be listed, no data will be output.
-n        Dump an LMDB database which does not use subdirectories.
-v        Use the previous environment state instead of the latest state. This may be useful if the latest state has
          been corrupted.
-p        If characters in either the key or data items are printing characters (as defined by isprint), output them
          directly. This option permits users to use standard text editors and tools to modify the contents of
          databases.

          Note: different systems may have different notions about what characters
          are considered printing characters, and databases dumped in this manner may
          be less portable to external systems.
-a        Dump all of the subdatabases in the environment.
-s subdb  Dump a specific subdatabase. If no database is specified, only the main database is dumped.

Exit status is zero if no errors occur.
Errors result in a non-zero exit status and a diagnostic message being written to standard error.

Dumping and reloading databases that use user-defined comparison functions will result in new databases that use the
default comparison functions. In this case it is quite likely that the reloaded database will be damaged beyond repair
permitting neither record storage nor retrieval.\fP

The only available workaround is to modify the source for the mdb_load utility to load the database using the correct
comparison functions.

////////////////////////////////////////////////////////////////////////////////

mdb_load - LMDB environment import tool

mdb_load [ -N -T -V -a -n ] [ -f file ] [ -s subd ] envpath

The mdb_load utility reads from the standard input and loads it into the LMDB environment envpath. The input to mdb_load
must be in the output format specified by the mdb_dump utility or as specified by the -T option below.


-V        Write the library version number to the standard output, and exit.
-a        Append all records in the order they appear in the input. The input is assumed to already be in correctly
          sorted order and no sorting or checking for redundant values will be performed. This option must be used to
          reload data that was produced by running mdb_dump on a database that uses custom compare functions.
-f file   Read from the specified file instead of from the standard input.
-n        Load an LMDB database which does not use subdirectories.
-s subdb  Load a specific subdatabase. If no database is specified, data is loaded into the main database.
-N        Don't overwrite existing records when loading into an already existing database; just skip them.
-T        Load data from simple text files. The input must be paired lines of text, where the first line of the pair is
          the key item, and the second line of the pair is its corresponding data item.

          A simple escape mechanism, where newline and backslash (\\) characters are special, is
          applied to the text input. Newline characters are interpreted as record separators.
          Backslash characters in the text will be interpreted in one of two ways: If the backslash
          character precedes another backslash character, the pair will be interpreted as a literal
          backslash. If the backslash character precedes any other character, the two characters
          following the backslash will be interpreted as a hexadecimal specification of a single
          character; for example, \\0a is a newline character in the ASCII character set.

          For this reason, any backslash or newline characters that naturally occur in the text
          input must be escaped to avoid misinterpretation by mdb_load.

Exit status is zero if no errors occur.
Errors result in a non-zero exit status anda diagnostic message being written to standard error.

////////////////////////////////////////////////////////////////////////////////

mdb_stat - LMDB environment status tool

mdb_stat [ -V -e -n -v ] [ -f [ f [ f ] ] ] [-r [ r ] ] [ -a | -s subd ] envpath

The mdb_stat utility displays the status of an LMDB environment.

-V        Write the library version number to the standard output, and exit.
-e        Display information about the database environment.
-f        Display information about the environment freelist.
          If -ff is given, summarize each freelist entry.
          If -fff is given, display the full list of page IDs in the freelist.
-n        Display the status of an LMDB database which does not use subdirectories.
-v        Use the previous environment state instead of the latest state. This may be useful if the latest state has
          been corrupted.
-r        Display information about the environment reader table. Shows the process ID, thread ID, and transaction ID
          for each active reader slot. The process ID and transaction ID are in decimal, the thread ID is in
          hexadecimal. The transaction ID is displayed as "-" if the reader does not currently have a read transaction
          open.

          If -rr is given, check for stale entries in the reader table and clear them. The reader table will be printed
          again after the check is performed.
-a        Display the status of all of the subdatabases in the environment.
-s subdb  Display the status of a specific subdatabase.

Exit status is zero if no errors occur.
Errors result in a non-zero exit status and a diagnostic message being written to standard error.
